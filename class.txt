vim: et ts=2 sts=2 sw=2 spell spelllang=en_us

5/29
  https://drb80.slack.com/
    #cs3250
    beatys@msudenver.edu
  contributions
    git commits
  time reading book (if you take notes to prove it) count as hours towards class
  LAs
    Luke Smith <lsmith@zenoscave.com>
    Jimmy Morga <jmorga68@msudenver.edu>
    Lauren Vagts <lvagts@msudenver.edu>
    Peter Nielson <pnielso2@msudenver.edu>
    Kelly Trujillo <ktruji25@msudenver.edu>
  Agile: recognition that customers will change their minds about what they want (and often) based on what you're showing them
    that's why you want to show them as often as possible
    individuals and interactions over processes and tools
    working software over comprehensive documentation
    customer collaboration over contract negotiation
    responding to change over following a plan
  product backlog, sprint backlog
    product backlog
      maintained by product owner
      consists of features, bug fixes, non-functional requirements, etc.
      often (but not always) stated in story points, using the rounded Fibonacci scale
      "story point" unit could be defined as an hour, a day, etc.
        must be agreed upon at outset
    sprint backlog
      once a sprint backlog is committed, no additional work can be added except by the team (with consent of product owner)
  user stories
  scrum master
    accountable for removing impediments to the ability of the team to deliver the product goal and deliverables
    not a dictator
      there to facilitate, not to take charge
    helping the team determine the definition of done for the product, with input from key stakeholders
    educating key stakeholders on scrum principles
  sprint review vs. sprint retrospective
    sprint retrospective
      What went well during the sprint?
      What could be improved in the next sprint?
  daily scrum
    accountability
    progress
      What did I finish?
    what will be done by the next meeting
      What am I going to do?
    blockers
      What is preventing me/us from meeting our sprint goal?
    sprint review/demo day
      not necessarily showing code, but what it does
  Trello
    used for tracking backlogs
  additions
    definition of done
    velocity
      total effort a team is capable of in a sprint
      a good velocity should show actual and expected velocities plateauing
  three pillars of scrum
    transparency
    inspection
    adaptation
  https://www.scrumguides.org/
    https://www.scrumguides.org/docs/scrumguide...
  (some other link too)
  trello
    "scrum by vince" power-up
    sprint backlog
    product backlog
    doing
    done
  scrum by vince
  [estimated story points] task name (actual story points)
    1, 2, 3, 5, 8, 13
  don't forget to get your burndown charts before you end your sprint!
    screenshot or save it somehow, to show your work later
  toggle for time tracking
  what five dysfunctions do you find in your team?
5/30
  Travis CI
    testing framework?
  Sonar Cloud
    automated tool which allows us to find bugs, vulnerabilities, bad practices
  CodeCov
    https://codecov.io/
  line coverage vs. branch coverage
  gitflow / git workflow ?
6/03
	first test: five dysfunctions, head-first
	second test: effective java
	don't talk in class
		first offense: lose 10 points
		second offense: lose 50(?) points
		third offense: fail!
	demo?
	80% of grade: recorded contributions to team
	epistemology:
		know what you know & don't know
	be humble and receptive to others' ideas
	cooperate with others
	be courteous & polite
	respect authority
	practice self-control
		manage procrastination
	accept responsibility for mistakes
	resolve conflicts appropriately
	exhibit positive attitude towards learning
	participate in class discussions
		TLA: three-letter acronym
	be an engaged listener
	follow directions
	meet deadlines!
		front-load!
			get a head start during first half of sprint
	ask for help when needed
	do neat, quality work
		spelling!
	positive work ethic
		accept dynamic change
	use libraries
		don't reinvent the wheel
		don't write linked lists, sorts, etc.
		steal liberally, cite liberally
			not doing so is cheating!
			comment Stack Exchange URLs
	share what you learn
		don't hoard information
	Beaty is Meyers-Briggs ENTP
		(e for extroverted)
	don't be too optimistic
		Life always intrudes.
	tag each sprint
	Face-to-Face are more useful than online ones.
		Don't use e-mail - prefer IMs.
	SME subject-matter experts
		interact with customer
		diplomat for development team
		capture user requirements
	Scrum masters can be dev team members.
		They shouldn't be managers.
			You want to be able to approach scrum master about blocks.
	good design (patterns) necessary for larger products
	Pull requests should always be reviewed. (?)
	XP (extreme programming)
		pair programming
		less experienced team member 'drives'
	Fixing one thing usually breaks multiple other things.
	What seems hard ends up being hard.
		What seems easy ends up being really hard.
	"The Mythical Man Month" (Fred Brooks)
		https://en.wikipedia.org/wiki/The_Mythical_Man-Month
		for physical work, adding workers speeds up process
		for intellectual work, adding a person to a team 
		adding team-members increases overhead, further delays a late project
		difficult to join a team when it's already under pressure
		O(n^2) problem
	You haven't done enough static/dynamic analysis(?).
	You haven't done enough testing.
	comments
		indicate you don't understand your code
		If you have to explain your code, it's shitty code.
		The only meaningful comments are documentation.
	maximum things a person can keep in their brain: 6
		three conditionals + three variables
		beyond seven: need to chunk
	method decomposition(?)
	Nobody cares how hard you worked.
		the only thing that matters:
			that the work gets done
	PEP 8
		spaces as tabs?
		blank line spacing
		compliance checkers available
	pydocs built in with Sphinx
	make -C docs
		means make, but change to 'docs' directory
		or you could just cd to 'docs' first, then make
	auto-generate .gitignore:
		https://www.gitignore.io/api/python
6/05
  Product owner does presentation
  definition of done
    95% code coverage
  'velocity':
    number  of story points per user story
  be up front with the customer about what you can & can't get done
  Software Engineering
    Software is everywhere and most of it is crap.
      costly - bug reports, workarounds
      Everything nowadays depends on software.
        average 29 computers in a car nowadays
      We can have an influence in areas of personal interest.
        Dr. Beaty spent 5 years at National Atmospheric Research Laboratory (NARL) in Boulder
    "Cathedral and the Bazaar" - about closed- vs. open-source software
      https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar
    WhatsApp
      built by 50 engineers in Silicon Valley in erlang
      Facebook later bought it for $19 billion.
    Software is complex
      https://informationisbeautiful.net/visualizations/million-lines-of-code
      Boeing 747
        28 months with 4.5k people work 40 hours/week:
          20,160,000 person hours
      Red Hat Linux 7.1
        30 million SLOC (source lines of code)
        8k person years
        2k hours/year
        16m person-hours
      Linux kernels approaching 500m SLOC
      Windows approaching 50m SLOC
      Choose the right language for the problem.
        Java was originally designed for "set-top boxes" (embedded systems).
          https://www.javaworld.com/article/2077072/feature--java----coming-to-a-tv-near-you-.html
          https://en.wikipedia.org/wiki/Set-top_box
        C was originally developed at Bell Labs by Dennis Ritchie between 1972 and 1973 to make utilities running on Unix.
          https://en.wikipedia.org/wiki/C_(programming_language)
      Purify by Rational
        memory leak tracker, bought by IBM
      The Magical Number Seven, Plus or Minus (George Armitage Miller)
        https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two
        size of early hunting parties?
        size of sports team
        digits in phone number
        complexity of a computer program
          variables, nesting, cyclomatic complexity
      Mariner 1 - $18.5m unmanned 1962 spacecraft lost in 1963 due to coding error
        https://en.wikipedia.org/wiki/Mariner_1#Overbar_transcription_error
      Therac 25
        cancer treatment device
        at least six massive radiation doses administered between 1985-1987
        https://en.wikipedia.org/wiki/Therac-25
        https://www.bugsnag.com/blog/bug-day-race-condition-therac-25
      Mars Climate Orbiter
        pounds-seconds vs. newton-seconds software error
      Siemens industrial control systems at Iranian nuclear facility infected by Stuxnet
        supposedly designed by US & Israeli governments
        broke half of centrifuges by spinning up & down
      787 Dreamliner
        according to FAA, there's a software bug that can cause its electrical system to fail and lead to a loss of control
        Even in 2015, our airplanes have integer overflow bugs.
      https://spectrum.ieee.org/aerospace/aviation/how-the-boeing-737-max-disaster-looks-to-a-software-developer
6/06
  Boeing 737 MAX
    300 people died!
    did gov't shutdown prevent code review?
  DIA
    automated baggage system:
      16 months past its hard deadline
      $560m over budget
      cost $1m/month to try to keep running
  Chaos '95
    $250b that year on IT development of 175k projects
    US companies pay $81b/year for cancelled software projects
    $59b for delays
    average 16.2% of software completed on time and on budget
      only 9% at larger companies!
    largest companies completed only 42% of originally proposed features
      better at smaller companies: 78%
    "No Silver Bullet â€“ Essence and Accident in Software Engineering" (Fred Brooks, author of "The Mythical Man Month")
      "There is no single development, in either technology or management technique, which by itself promises even one order of magnitude [tenfold] improvement within a decade in productivity, in reliability, in simplicity."
        We aren't doing any better than we had ever done.
        There is an up to tenfold difference between an ordinary designer/developer and a great one.
          He found no correlation to any personality test.
  halting problem:
    We can never know whether a program stops.
      https://en.wikipedia.org/wiki/Halting_problem
  software engineering (coined by Margaret Hamilton - worked on Apollo 11)
    the study and application of engineering to design, develop, and maintain of software
    https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)
  "user story"
    agile lingo for program requirements
  functional requirement
    what the program must do - yes/no
  non-functional requirements
    the manner in which the functional requirements need to be achieved
    performance, reliability, usability, maintainability
    not user-visible
      can be just as important as functional requirements though
    example:
      code coverage
      Sonar Cloud maintainability indices
  design constraints
    platform
    language
    database
    web-app vs. GUI, etc.
6/10
  incoming diff patch
  Peter: graphs
  burndown charts:
    show how far along project is compared to where you should be
    green line: what you should have done
    use as a tool to diagnose team activity
  local repository:
    only lives on your machine
    git init: initializes local repository
    git branch: creates a new branch/version/copy
    git add: stages a file/change
    git commit: commit staged changes
    git merge: merge a branch into a target branch
    git checkout: switch branches
  you can push changes directly to another teammate's copy of a repository via SSH or gitweb
  "pull requests" and "branch protection" are features of github - not git
  we should only demo from master branch
    pull requests to master branch *must* be approved by LA
  a pull consists of a fetch and a merge
  git branch remove {branch name}
    do this after you're finished with a feature branch
  'E2E' (end-to-end) testing (= integration testing?)
  graphs: the most used data type
    linked lists: specialized graphs
      node
    vertices
      data
        name
      function
      O-N edges
    edges
      allow movement to other vertices
      can have 'weights'
    applications
      networks, network topologies
      advanced math
      functional programming
      machine learning
        neural networks
      graph databases
      game development
    weighted vs. unweighted
      weights: distance, importance, etc.
      unweighted: edges effectively equivalent
    directed vs. undirected
      directed ('digraph')
    a 'multigraph' (in contrast to a simple graph) can have "parallel edges" with different weights & directions
    connectedness
      given any vertex, can you reach any other vertex through legal edge movements?
    "fully connected"
      can every vertex reach every other vertex through a SINGLE EDGE traversal?
    does a path exist?
    Dijkstra's algorithm
      finds the most efficient possible path between two vertices, if such a path exists
    adjacency list
      list of linked lists
      each vertex is the head of a linked list (or a list, array, etc.)
        the linked list holds their edges (and weights, if they exists)
    adjacency matrix
      matrix of vertices
        row & column titles are the vertices
        row-column indices are edge weights (or edge existence)
        from rows to columns
    lists:
      more common
      usually easier to visualize/conceptualize
      adding edges is slow
      many algorithms are slow or very individualized
    matrices:
      most algorithms extremely fast in comparison
      searches and traversals are very mathematical
      adding vertices is slow
      progressively more complex with size
    graph library for Python:
      NetworkX: https://networkx.github.io/
        has graphs, digraphs, and multigraphs
        well tested (>90% coverage)
        very OO compliant)
6/12
  leverage python's strengths
    dictionaries
    method references
      pythonic methods are first-class objects and can be passed as arguments
  functional requirements: user visible
    absolute - yes or no
    users care more about these
  we as developers care more about non-functional requirements
    on a scale
  analysis
    static (before runtime)
      e.g. Sonar, PyLint, Radon (also Python)
    dynamic
      Spotbugs (Java), Valgrind (C/C++), Purify
  testing (QA - quality assurance)
    acceptance: customer says it's what they wanted
    unit: per-method
      write unit tests before functionality
        make sure it fails first
        commit when it passes
      industry best practice
        *You want this on your rÃ©sumÃ©.*
        It will help you get a job.
      bottom-up approach to testing
        "You can't polish a turd."
      YAGNI ("You ain't gonna need it.")
        don't write a method until you need it
    integration: per class
    system
      black box testing
        by unbiased users
          things developers won't have thought about
  TDD (test-driven development) mindset
    not how it will work
      ... but how it will break!
    1:1 SLOC tests:code
  "Psychology of Programming"
    programming is a creative (but maybe not artistic) activity
    there is no one best way to do it
  implementation
    requirements engineering
      what does the customer *really* want?
        how to elicit that information?
  management vs. leadership
    "Good or Great?" (Jim C. Collins)
      https://en.wikipedia.org/wiki/Good_to_Great
      https://www.amazon.com/Good-Great-Some-Companies-Others-ebook/dp/B0058DRUV6
    leadership: direction
    getting there: management
  "The Elements of Style" (Strunk & White)
    https://en.wikipedia.org/wiki/The_Elements_of_Style
  guidelines
    naming
      use good, descriptive names
    use libraries
    do code reviews
      "Many eyes make shallow bugs."
        "You don't have to be a code wizard to have a positive impact on code quality."
        "Code is read far more often than written."
          https://twitter.com/thockin/status/927942054377766912
      https://www.johndcook.com/blog/2009/10/25/shallow-bugs-reported-bugs/
  quicksort vs. bubblesort for presorted list
    quicksort: nlogn
    bubblesort: n
  DJUG (Denver Java Users Group)
    https://www.meetup.com/DenverJavaUsersGroup/
    Pivotal Labs in RiNo
    always recruiters there
  DRY ("Don't repeat yourself.")
  Agile
    Waterfall
      first gather all requirements
      then do all architecture (how the pieces fit together)
      then do all design
      then do all implementation
      then do all the testing
    for one, we don't want to put tests off until the end
    secondly, things change
    Agile emphasizes the human & team aspects of software
    shorter iterations, release cycles
      incremental design
      user involvement
      light on documentation
      informal communication
      accept change
        gather requirements continually
        acknowledge new user requirements
          but make them understand the ramifications of their decisions
          say, "Yes, *and*..."
            your change is going to impact the delivery date
      shown that users will be happiest in the end if they see the growth of the entire product
        when they feel like they have had input
        when they have seen the functionality develop from its most rudimentary incarnation
6/13
  engine should be separated from game for reusability
    user â†” CLI â†” game engine â†” state.yml
  This is MVC:
    model: state.yml
    view: CLI
    controller: game engine
  we must use YAML
  SME advises a REPL
  we want to have functions for every action
  upon evaluation, we determine whether the loop should end
    e.g. error, exit, save, win, etc.
  we must be able to go in all cardinal directions
  directions must mirror one another
    if I go east to one room, I should be able to go back west to the first room
  rooms should be able to contain items
    e.g. swords, bags, etc.
  rooms should have a 'visited' parameter
  NPCs (non-player characters)
    just other players, as far as the game is concerned
    "model-actor" design pattern
      basically you have a giant table
  state:
    room I'm in
    objects I have
  swordless state âžœ pick up sword âžœ sword-weilding state
  viability testing:
    time & effort required
  YAML is like JSON
    but doesn't nest as well
  PyTest requires method names start with "test_"
    Luke thinks file names should start with "Test"
    Luke puts all his tests in a "tests" subdirectory
6/17
  our brains can instantly recognize seven or fewer items
    but eight items or more need to be chunked
    that's why cyclomatic complexity is important
      it's a physical limitation we have
  Agile
    emphasizes short releases and iterations
    all of the approaches preceding Agile have broken down
      because the stuff that we're building has gotten too big
    incremental design
    user involvement is crucial
      that's the only way we can be sure they get want they want
        (not what they thought they wanted)
    lightweight documentation
    willingness to change
    doesn't: reduce the overall development time
      does: put partially-working products into the user's hands all the time
    Waterfall used to have two-year cycles!
      therefore of course everybody procrastinated
    RUP: 100 tasks and 30 roles
      https://sceweb.uhcl.edu/helm/RationalUnifiedProcess/process/workers/ovu_works.htm
      Rational Unified Process
      the process ended up taking up more times than the actual work
    eliminate comments in code
      refactor and eliminate comments
      the code may change, while the comments may not
        If the comments disagree with the code, they're both wrong.
      exception: API documentation
    finished product always available
  18-24 months:
    ask whether you are happy in your job
    you do not want to get left behind!
  'scrumfall'
    waterfall-agile hybrid
  agilemanifesto.org
    individuals and interactions over processes and tools
      how we interact with the people who are writing the checks
    working software over comprehensive documentation
      if i'm documenting something that doesn't exist or doesn't work...
        i'm wasting my time
      large amounts of documentation can become cumbersome and out of sync
    customer collaboration over contract negotiation
      we want highly involved, highly engaged customers
        difficult when dealing with governments - they want contracts
    responding to change over following a plan
      once you recognize that the plan is flawed, change it
      vast expectations, half-vast implementations
  good process won't fix bad team members
    firing people is necessary
  "S&M people" - sales & marketing, LOL
  make sure your boundary router has uPNP turned off
6/19
  room 200K, noon
    Peter will go over resolving merge conflicts
    also Luke will go over mock (at the same time?)
  design patterns
    a general reusable solution to a commonly occurring problem
      within a given context in software design
    creates a shared vocabulary among professionals
      shared understanding
      abstraction
      reusability
    origins go back to actual architecture/planning
      Christopher Alexander (1977/79)
        1987: Kent Beck & Ward Cunningham began exploring applications in software
        Alexander's work led directly to creation of the first wiki
        it also went on to influence the emergence of OO & the Agile philosophy
        "generative grammar"
          fractal: an object which has non-integral (not whole numbers?) dimensions
        "The Timeless Way of Building" (1979)
        Alexander's "Notes on the Synthesis of Form" was once required reading in CS
        "A Discipline of Programming" (Dijkstra) also influenced by Alexander
        as was SimCity
    categories
      creational patterns
      structural patterns
      behavioral patterns
      designed using the concepts of:
        delegation
        aggregation
        consultation
    object-oriented design - objects that represent things and do things
      a abstraction
      e encapsulation
      i inheritance
      o+p (polymorphism)
    design patterns vs. principles - know the difference
      principles
        OO
          identify the aspects of your application that vary
            separate them from what stays the same
            ability to change one thing without breaking everything else
          program to an interface - not an implementation
            "Pay no attention to the man behind the curtain."
            so in Java, program to supertype - not a subtype
              e.g. program to Map - not HashMap
            in the interface, only expose parts that clients need
            Smalltalk (Adelle Goldberg, ~1980)
          favor composition over inheritance
            inheritance limits reusability
      patterns
        strategy pattern (behavioral)
          define a family of algorithms, encapsulate each one, make them interchangeable
          lets the algorithm vary independently from the clients that use it
        observer pattern ('officially' behavioral, but also kinda structural too)
          one-to-many dependency
            helps decouple objects
          on object (called the subject) maintains a list
            of its dependents (called observers)
            and notifices them automatically of any state changes
          a key part of the MVC pattern
          Java: Observer, Observable
          Javascript: EventListener
          subject:
            attach(), detach(), notify()
          observer:
            update()
        strive for loosely-coupled designs between objects that interact
          cohesive: do one thing and do it well
          loosely-coupled: objects know very little about each other
        don't depend on the order of evaluation of notifications
        Java Observable not an interface
        mustinherit
        setChanged() is protected
  celsius to fahrenheit
    double it and add 32
6/20
  midterm: 06/27/2019
  evaluations from each person on the team will be a part of your grade
  "Make sure that whatever company you work for...
    they want to help you grow and you want to help the company grow."
6/24
  decorators
    have the same object as the objects they decorate
    add behavior before and/or after delegating object
  factory pattern (creational)
    handles the details of object creation
      encapsulates the creation of a subclass
      decouples interface from creation
    can return a variety of types
    can add additional types easily
    if static, can't subtype to extend
    factories don't necessarily have to return abstract types
      a default concrete implementation can be used
      creation through inheritance
      creates objects of a single type
    abstract factory
      creation through composition
      instantiated via new and passed back
      create families of related objects via factories
    dependency inversion
      depend upon abstractions - not concrete classes
      By dictating that both high-level and low-level objects must depend on the same abstraction this design principle inverts the way some people may think about object-oriented programming
        https://quizlet.com/227196875/solid-design-principles-flash-cards/
      implementation decoupled from interface
      references should be to supertypes - not concrete classes
      no class should derive from a concrete class
      no method should override an implemented method of any of its base classes
        https://bowenli86.github.io/2016/04/14/best%20practices/design%20pattern/Design-Pattern-Strategy-Pattern-Program-to-an-interface-not-an-implementation/
        http://stg-tud.github.io/sedc/Lecture/ws13-14/3.5-DIP.html#mode=document
    dependency injection
      a technique whereby one object (or static method) supplies the dependencies of another object
      a dependency is an object that can be used (a service)
      an injection is the passing of a dependency of a dependency to a dependent object (a client)
      https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/
    IoC inversion of control (design principle) - frameworks vs. libraries
      you call a library; a framework calls you
      custom portions of a computer program receive the flow of control from a generic framework
  singleton
    there's only one object which always gets returned
    uses:
      thread pools, caches, dialog boxes, preferences, logging, device drivers, I/O
    lazy initialization
    private constructor with no arguments to prevent extension
    double-checked locking
      https://errorprone.info/bugpattern/DoubleCheckedLocking
      https://rules.sonarsource.com/java/tag/multi-threading/RSPEC-2168
      https://stackoverflow.com/questions/7855700/why-is-volatile-used-in-double-checked-locking
      'synchronized' Java keyword makes method (or block of code - with object parameter) thread-safe
        prevents two threads from running simultaneously
      'volatile' Java keyword writes directly to main memory, bypassing registers and caches
        ensures visibility
        when you read from a volatile variable...
          *all* thread-visible variables are re-read from memory
        when you write one...
          all thread-visible variables up to that line are written directly to memory
    atomic
      reads and writes are atomic for reference variables and most primitives
      also for variables declared volatile
    Scala is better suited to parallelization
      the JVM can run it, so put your parallel code in Scala
    Java Concurrency in Practice
  serialization
6/26
  test
    design principles
    compare and contrast the facade and the adapter
  command pattern (behavioral)
    object used to encapsulate all info needed to perform an action or trigger an event at a later time
    client - responsible for creating a concrete command and setting its receiver
    invoker holds a command object at some point and calls its execute() method
    command declares an interface that has at least an execute() method
    receiver knows how to perform the work
    concrete command is the difference from observer
  adapter
    convert one interface into another
    object adapters use composition
    class adapters use inheritance
  faÃ§ade
    a unified interface to a set of interfaces in a subsystem
    a higher-level interface that makes the subsystem easier to use
      "ratchets up the abstraction"
      you call this one thing and it calls a bunch of other things
    pushing one button to turn on your entertainment system
    an adapter alters an interface to make it usable
  what's the difference between an adapter and a facade?
      a faÃ§ade makes a complicated interface easier to use
  MVC (architectural pattern)
    command
    observer
    inversion of control
    delegates
  principle of least knowledge
    talk to only immediate friends
    decouples
    law of demeter
    methods may talk to:
      their own object
      objects passed as parameters
      objects they instantiate
      instance variables
  template (behavioral)
    defines a program skeleton of an algorithm in an operation
    lets one redefine certain steps of an algorithm without changing the algorithm's structure
    examples:
      abstract classes
      hooks
        allow the concrete algorithm to be defined at runtime
      both the strategy and the template patterns encapsulate objects
        strategy via composition
        template via inheritance
          the factory pattern (creational) is a very specialized template pattern
            factories are abstract, and they might have several concrete implementations
            they return one of their subclasses
7/1
  we're doing it wrong
    need to use TDD
    need to communicate more with the customer about where we're not done
  iterator pattern
    moves the task of traversal outside of data structures
    in Java, the old Enumeration has been supplanted by Iterators, which allow for removal
  design principle:
    a class should have only one reason to change (single-responsibility principle)
  composite pattern
    allows you to compose objects into tree structures
      at every level, the thing below is the same type as the thing above
        part/whole relationship
      we can treat individual objects uniformly, use the same operations
        (polymorphism)
  low coupling, high cohesion
  finite state machines
    states: vending machine, elevator, lock, turnstile
    an alternative to a jungle of conditional statements
    similar to strategy
      strategy is an alternative to subclassing, as it uses compositiion
  getting a job
    networking helps
    DJUG https://www.meetup.com/DenverJavaUsersGroup
  join:
    ACM (Association of Computing Machinery)
    IEEE
  "You're either part of the solution or part of the precipitate." LOL
  people are hired in order to solve problems
  market yourself
    print up some business cards
  github
    your schoolwork
    gists
  create and give a presentation or two
  your rÃ©sumÃ© will first be filtered by an HR program
    it must be buzzword compliant
      you must mention all of the things that they say are required
    you have ~5 seconds to catch someone's attention
    don't put your address
      the message is that you want a short commute
        probably not the message you want to convey
    don't use your school e-mail address
    don't list your required courses
      *do* list your electives
    don't list your IDEs
      nobody cares
    don't put in objectives
      "Your objective doesn't solve their problems - it adds to them."
      however, objectives and targetted information *can* go into the cover letter
    do list your languages, ordered by level of experience
      generally the expectation is strongest first
    do list upper-division school projects
    do list Scrum, GitHub, design patterns, TDD, Travis (CI/CD), Sonar Cloud
    mention Linux
    say what your role was and what you actually accomplished
      don't say "I was responsible for..." (doesn't mean you actually did it)
    do be very careful with spelling, grammar, and formatting
      it's what we do
        we write clean code without errors
        we should be able to spell
      don't change fonts, justifications, etc.
        be consistent
7/3
  kinds of interviews
    phone screening
    online quiz
    sharing a meal (use good table manners)
    oftentimes you'll either begin or end the day with human resources
  arrive at least 15 minutes early, but enter the building 8-10 minutes early
  bring extra copies of your rÃ©sumÃ©
  follow up
    ideally the same day
    at least with the hiring manager
      if you have other people's e-mails, do the same with them
    may be the best predictor of getting a job
    e-mail is okay
  dress well
  body language
    make eye contact
      otherwise people don't trust you
    don't cross your arms or legs
      shows defensiveness
      looks like you aren't listening
    lean towards the person talking to you
      if you lean back, you are disconnecting
      leaning in shows interest
    try to avoid your nervous habits
      just do your best
      to avoid distractions
  don't wear Axe
    some people may be sensitive/allergic
  what you want
    you're interviewing them just as much as they are you
    ask them questions
      shows you're interested
      make sure it's a place where you want to build your career
    maybe check out glassdoor in advance
    is lateral movement possible (among different teams)
    how do you support my professional development?
